/*
Cleaning Data in SQL Queries
Total Rows: 56,477
*/

SELECT
  *
FROM
  PortfolioProject.dbo.NashvilleHousing


--------------------------------------------------------------------------------------------------------------------------
/*Standardizing Date Format (SaleDate removing time included)*/

SELECT
  SaleDate,
 CONVERT(Date,SaleDate)
FROM
  PortfolioProject.dbo.NashvilleHousing

UPDATE 
  NashvilleHousing
SET
  SaleDate = CONVERT(Date,SaleDate)


----- If it doesn't Update properly

ALTER TABLE 
  NashvilleHousing
ADD
  SaleDateConverted Date;

UPDATE 
  NashvilleHousing
SET
  SaleDateConverted = CONVERT(Date,SaleDate)

-----RESULTS
SELECT
  SaleDate,
  SaleDateConverted
FROM
  PortfolioProject.dbo.NashvilleHousing
 --------------------------------------------------------------------------------------------------------------------------

/*Populating Property Address data*/

SELECT
  *
FROM
  PortfolioProject.dbo.NashvilleHousing
--WHERE
  --PropertyAddress IS NULL
ORDER BY
  ParcelID

---Joining
SELECT
  a.ParcelID,
  a.PropertyAddress,
  b.ParcelID,
  b.PropertyAddress,
  ISNULL(a.PropertyAddress, b.PropertyAddress) --Takes Null from "a" and populates value from "b" into a new column
FROM
  PortfolioProject.dbo.NashvilleHousing a
JOIN 
  PortfolioProject.dbo.NashvilleHousing b
 ON a.ParcelID = b.ParcelID
 AND a.[UniqueID ] <> b.[UniqueID ]
WHERE 
  a.PropertyAddress IS NULL

UPDATE a 
SET
  PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)  --Takes Null from "a" and copies value from "b" into "a" 
FROM
  PortfolioProject.dbo.NashvilleHousing a
JOIN 
  PortfolioProject.dbo.NashvilleHousing b
 ON a.ParcelID = b.ParcelID
 AND a.[UniqueID ] <> b.[UniqueID ]
WHERE 
  a.PropertyAddress IS NULL   --All Null values in property address are now filled

--------------------------------------------------------------------------------------------------------------------------

/*Breaking out Address into Individual Columns (Address, City, State)*/
SELECT
  PropertyAddress
FROM
  PortfolioProject.dbo.NashvilleHousing

SELECT
SUBSTRING
  (PropertyAddress, 1, CHARINDEX(',',PropertyAddress) -1) AS Address, --Getting address before ','
SUBSTRING
  (PropertyAddress, CHARINDEX(',',PropertyAddress) +1 , LEN(PropertyAddress)) AS City --Getting address after ','
FROM
  PortfolioProject.dbo.NashvilleHousing

--- Altering and Updating Tables to separate PropertyAddress

ALTER TABLE NashvilleHousing
ADD PropertySplitAddress NVARCHAR (255);
UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress) -1 )


ALTER TABLE NashvilleHousing
ADD PropertySplitCity NVARCHAR (255);
UPDATE NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress) +1 , LEN(PropertyAddress))


--- Altering and Updating Tables to separate OwnerAddress
SELECT
  *
FROM
  PortfolioProject.dbo.NashvilleHousing

SELECT
  PARSENAME(REPLACE(OwnerAddress, ',','.') ,3) --Adress
  , PARSENAME(REPLACE(OwnerAddress, ',','.') ,2) --City
  , PARSENAME(REPLACE(OwnerAddress, ',','.') ,1) --State
FROM
  PortfolioProject.dbo.NashvilleHousing

ALTER TABLE NashvilleHousing
ADD OwnerSplitAddress NVARCHAR (255);
UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',','.') ,3)

ALTER TABLE NashvilleHousing
ADD OwnerSplitCity NVARCHAR (255);
UPDATE NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',','.') ,2)

ALTER TABLE NashvilleHousing
ADD OwnerSplitState NVARCHAR (255);
UPDATE NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',','.') ,1)


-----RESULTS
SELECT
 PropertyAddress,
 PropertySplitAddress,
 PropertySplitCity
FROM
  PortfolioProject.dbo.NashvilleHousing

SELECT
 OwnerAddress,
 OwnerSplitAddress,
 OwnerSplitCity,
 OwnerSplitState
FROM
  PortfolioProject.dbo.NashvilleHousing
--------------------------------------------------------------------------------------------------------------------------

/* Changing Y and N to Yes and No in "Sold as Vacant" field*/
SELECT
  DISTINCT(SoldAsVacant),
  COUNT(SoldAsVacant)
FROM
  PortfolioProject.dbo.NashvilleHousing
GROUP BY 
  (SoldAsVacant)
ORDER BY
  2

SELECT
  SoldAsVacant,
  CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
       WHEN SoldAsVacant = 'N' THEN 'No'
  ELSE SoldAsVacant
  END
FROM
  PortfolioProject.dbo.NashvilleHousing

UPDATE NashvilleHousing
SET SoldAsVacant = 
			CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
				WHEN SoldAsVacant = 'N' THEN 'No'
			ELSE SoldAsVacant
			END  

--All Results for this column are now only either Yes / No
-----------------------------------------------------------------------------------------------------------------------------------------------------------

/* Removing Duplicates*/
WITH RowNumCTE AS(
SELECT 
  *,
  ROW_NUMBER() OVER(
  PARTITION BY
               ParcelID,
			   PropertyAddress,
			   SalePrice,
			   SaleDate,
			   LegalReference
	  ORDER BY 
	           UniqueID) row_num
FROM
  PortfolioProject.dbo.NashvilleHousing
)
 SELECT *  -- DELETE  used to delete 104 duplicates 
 FROM RowNumCTE
 WHERE row_num > 1
 ORDER BY PropertyAddress

 -----RESULTS
 SELECT * FROM PortfolioProject.dbo.NashvilleHousing -- original rows: 56,477, current: 56,737 rows


-----------------------------------------------------------------------------------------------------------------------------------------------------------

